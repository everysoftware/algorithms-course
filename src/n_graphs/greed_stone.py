INF = 10**20


# O(n^3)
def greed_stone(matrix: list[list[int]]) -> tuple[int, list[int]] | None:
    n = len(matrix)
    # Преобразуем матрицу стоимости так, чтобы стоимость перемещения из города в самого себя была равна
    # бесконечности. Это помогает нам убедиться, что мы не останемся в том же городе при выборе следующего
    # города для посещения.
    matrix = [[(x if x != 0 else INF) for x in costs] for costs in matrix]
    # Инициализируем минимальную стоимость и путь.
    min_cost, min_path = INF, []
    # Для каждого города мы пытаемся найти путь, начинающийся в этом городе, который посещает все города
    # и возвращает нас обратно в начальный город.
    for start_city in range(n):
        # Инициализируем список посещенных городов и путь.
        visited = [False] * n
        path, cost = [start_city], 0
        # Инициализируем текущий город.
        city = start_city
        for _ in range(n - 1):
            visited[city] = True
            # Выбираем следующий город, который еще не был посещен и имеет минимальную стоимость
            # перемещения из текущего города.
            next_city, score = min(
                ((c, matrix[city][c]) for c in range(n) if not visited[c]),
                key=lambda x: x[1],
            )
            # Добавляем выбранный город в путь и увеличиваем общую стоимость на стоимость перемещения до
            # выбранного города.
            path.append(next_city)
            cost += score
            # Обновляем текущий город.
            city = next_city
        # После посещения всех городов мы возвращаемся в начальный город.
        # Увеличиваем общую стоимость на стоимость перемещения обратно в начальный город.
        cost += matrix[city][start_city]
        path.append(start_city)
        # Если общая стоимость пути меньше минимальной стоимости пути, который мы нашли до этого,
        # обновляем минимальную стоимость и путь.
        if cost < min_cost:
            min_cost = cost
            min_path = path
    if min_cost == INF:
        return None
    return min_cost, min_path
