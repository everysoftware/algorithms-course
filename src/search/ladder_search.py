"""Поиск элемента на отсортированной матрице."""

"""
Дана матрица MxN, в которой строки и столбцы отсортированы в порядке возрастания.

Найти элемент в матрице.

Пример:
1  4  7  11
2  5  8  12
3  6  9  16
10 13 14 17
15 18 21 24

Найти 5.

Решение:

Виды решения:
1. Перебор всех элементов матрицы. Сложность O(N*M).
2. Бинарный поиск. Сложность: O(N*log(M)).
3. Лесенка. Сложность: O(N + M).

1. Начинаем с правого верхнего угла.
2. Если элемент больше искомого, то идём влево.
3. Если элемент меньше искомого, то идём вниз.
4. Если элемент равен искомому, то нашли.
5. Если дошли до нижнего левого угла, то элемента нет в матрице.
"""


def ladder_search(a: list[list[int]], target: int) -> tuple[int, int]:
    """Поиск элемента лесенкой на отсортированной матрице. Сложность O(N + M)"""
    n, m = len(a), len(a[0])
    i = 0
    j = m - 1

    while i < n and j >= 0:
        if a[i][j] < target:
            # Идём вниз
            i += 1
        elif a[i][j] > target:
            # Идём влево
            j -= 1
        else:
            return i, j

    return -1, -1
