"""
Ступеньки лестницы помечены целыми числами.
Найти макс. сумму, кот. можно получить идя
по лестницу снизу вверх, каждый раз поднимаясь
на одну или две ступеньки
"""


# O(N)
def ladder(a):
    n = len(a)
    # d[i] - макс. сумма от 0 до i-й ступеньки
    d = [0] * (n + 1)
    d[0] = 0
    d[1] = a[0]
    for i in range(2, n + 1):
        d[i] = max(d[i - 1], d[i - 2]) + a[i - 1]
    return d[n]


# 1 -> n
def calc(n):
    # Считаем ответ O(N)
    # d[i] - мин. число операций, чтобы получить i из 1
    d = [float('inf')] * (n + 1)
    prev = [-1] * (n + 1)
    d[0] = 0
    d[1] = 0
    for x in range(1, n + 1):
        h = [x + 1, 2 * x, 3 * x]
        for i in h:
            if i <= n and d[i] > d[x] + 1:
                d[i] = d[x] + 1
                prev[i] = x
    # Восстанавливаем решение (O(N))
    ans = int(d[n])
    s = [-1] * (ans + 1)
    s[0] = 1
    i = n
    while ans > 0:
        s[ans] = i
        i = prev[i]
        ans -= 1
    return s
