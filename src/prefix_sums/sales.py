"""
Представьте, что вы владелец магазина и хотите анализировать свои ежедневные продажи. У вас есть массив,
где каждый элемент представляет собой общую сумму продаж за день. Вы хотите узнать общую сумму продаж за
заданный период времени [start_day, end_day].

Входные данные:
В первой строке 2 целых числа n и m (1 ≤ n, m ≤ 10^5) - количество дней и количество запросов.
Во второй строке n целых чисел sales, где каждый элемент представляет сумму продаж за i-й день (0 ≤ sales[i] ≤ 10^6).
В следующих m строках содержатся запросы. Каждый запрос представляет собой пару целых чисел start_day и end_day
(1 ≤ start_day ≤ end_day <= n),

Выходные данные:
Для каждого запроса напечатайте общую сумму продаж за заданный период времени.

Пример:
5 3
100 200 300 400 500
1 3
2 4
1 5
Вывод:
600 900 1500
"""


# O(n + m)
def sales_sum(sales: list[int], queries: list[tuple[int, int]]) -> list[int]:
    n = len(sales)
    # Подсчитываем префиксные суммы: p[i] = общая сумма продаж за первые i день [1, i].
    p = [0] * (n + 1)
    """prefix_sum[i] - """
    for i in range(1, n + 1):
        p[i] = p[i - 1] + sales[i - 1]
    # Подсчитываем ответы на запросы
    answers = []
    for start_day, end_day in queries:
        # Стартовый день включается, поэтому данные за него мы не вычитаем.
        answers.append(p[end_day] - p[start_day - 1])
    return answers
