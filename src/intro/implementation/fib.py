"""Вычисление чисел Фибоначчи различными способами."""

from functools import lru_cache


def fib_rec(n: int) -> int:
    """Рекурсивное вычисление числа Фибоначчи. Сложность O(2^N)."""
    if n < 2:
        return n
    else:
        return fib_rec(n - 1) + fib_rec(n - 2)


def fib_cache_helper(n: int, cache: dict[int, int]) -> int:
    if n < 2:
        return n

    if n not in cache:
        cache[n] = fib_cache_helper(n - 1, cache) + fib_cache_helper(n - 2, cache)

    return cache[n]


def fib_cache(n: int) -> int:
    """Рекурсивное вычисление числа Фибоначчи с кэшированием. Сложность O(N)."""
    return fib_cache_helper(n, {})


@lru_cache(None)
def fib_lru_cache(n: int) -> int:
    """Рекурсивное вычисление числа Фибоначчи с кэшированием с помощью lru_cache. Сложность O(N)."""
    if n < 2:
        return n
    else:
        return fib_lru_cache(n - 1) + fib_lru_cache(n - 2)


def fib_dp(n: int) -> int:
    """Вычисление числа Фибоначчи методом динамического программирования. Сложность O(N)."""
    a = [0] * (n + 1)
    a[1] = 1

    for i in range(2, n + 1):
        a[i] = a[i - 1] + a[i - 2]

    return a[n]


def fib_two_last(n: int) -> int:
    """Вычисление числа Фибоначчи методом двух последних чисел. Сложность O(N)."""
    fib1 = 0
    fib2 = 1

    for i in range(2, n + 1):
        fib1, fib2 = fib2, fib1 + fib2

    return fib2


"""
Формула Бине для вычисления чисел Фибоначчи, зависит от точного вычисления и использования
чисел с плавающей точкой. Однако, числа с плавающей точкой в компьютерах представлены с ограниченной точностью.

Когда n становится очень большим (например, 100), phi**n и psi**n становятся очень большими и очень маленькими числами
соответственно. Это может привести к значительным ошибкам округления из-за ограниченной точности чисел с плавающей 
точкой. В частности, psi**n становится настолько малым, что оно округляется до нуля, что приводит к потере точности 
в вычислениях.

В результате, формула Бине может давать неточные результаты для больших значений n. 
Для больших n обычно используются другие методы вычисления чисел Фибоначчи, такие как динамическое программирование. 
Это обеспечивает более точные результаты и является более эффективным для больших n.
"""


def fib_formula(n: int) -> int:
    """Вычисление числа Фибоначчи по формуле Бине. Сложность O(1)."""
    phi = (1 + 5**0.5) / 2
    psi = (1 - 5**0.5) / 2

    return int((phi**n - psi**n) / 5**0.5)
