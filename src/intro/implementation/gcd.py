"""Наибольший общий делитель (НОД) двух чисел - это наибольшее число, на которое оба числа делятся без остатка."""


def gcd_naive(a: int, b: int) -> int:
    """Наивный алгоритм нахождения НОД двух чисел. Сложность O(min(x, y))"""
    res = 1

    for d in range(2, min(a, b)):
        if a % d == 0 and b % d == 0:
            res = d

    return res


"""
Алгоритм Евклида для нахождения НОД двух чисел.

Алгоритм Евклида основан на следующем свойстве:
Пусть a и b - два целых числа, и r - остаток от деления a на b.
Если a = bq + r для некоторых целых чисел q и r, тогда НОД(a, b) = НОД(b, r).

Доказательство свойства общего делителя:
Пусть d - НОД(a, b), тогда a = dx и b = dy для некоторых целых x и y.
Тогда r = a - bq = dx - dyq = d(x - yq).
Таким образом, d - общий делитель a, b и r.

Доказательство свойства максимальности:
Предположим, что существует число e > d, которое является общим делителем b и r.
Тогда e должно быть делителем a, так как a = b * q + r.
Однако это противоречит определению d как НОД(a, b).

Следовательно, НОД(a, b) = НОД(b, r).

Сложность алгоритма Евклида составляет O(log(min(a, b))). В алгоритме Евклида на каждом шаге мы заменяем пару чисел 
(a, b) на пару (b, a mod b). Если a > b, то a mod b < a / 2 следовательно, на каждом шаге хотя бы одно из чисел 
уменьшается минимум вдвое, что и дает оценку O(log(min(a, b))). Случай a <= b аналогичен случаю a > b, так как на 
следующем шаге мы поменяем местами a и b.

Давайте докажем утверждение: если a > b, то a mod b < a / 2.

Пусть a = bq + r, тогда r = a - bq < a - b (так как q > 1). С другой стороны, 0 <= r < b.
Давайте сложим оба неравенства: r + r < a - b + b, то есть 2r < a, следовательно, r < a / 2.
"""


def gcd_euclid(a: int, b: int) -> int:
    """Алгоритм Евклида для нахождения НОД двух чисел. Сложность O(log(min(a, b)))"""
    while b != 0:
        a, b = b, a % b

    return a


def gcd_euclid_rec(a: int, b: int) -> int:
    """Рекурсивный алгоритм Евклида для нахождения НОД двух чисел. Сложность O(log(min(a, b)))"""
    if b == 0:
        return a

    return gcd_euclid_rec(b, a % b)
