"""
Авторская задача (И. Стасевич).

В банке работает N окон для обслуживания клиентов. Клиенты приходят в банк и становятся в очередь.
Каждый клиент обслуживается за определенное время. Необходимо определить, сколько времени в среднем придется
ждать клиенту перед началом обслуживания.

Формат ввода
В первой строке вводится число N - количество окон (1 ≤ N ≤ 1000) и число M - количество клиентов (1 ≤ M ≤ 1000).
Далее вводится M строк, в каждой из которых содержится два числа: время прихода клиента и время обслуживания клиента.
Время прихода клиента - это целое число от 1 до 1000. Время обслуживания клиента - это целое число от 1 до 1000.

Формат вывода
Выведите одно число - среднее время ожидания клиента перед началом обслуживания. Ответ будет считаться правильным,
если его абсолютная или относительная погрешность не превышает 10^-6.

Пример 1
Ввод
2 3
1 10
2 5
3 7
Вывод
1.333333

Пример 2
Ввод
1 3
1 1
2 1
3 1
Вывод
0
"""

from collections import deque


def average_waiting_time(n: int, clients: list[tuple[int, int]]) -> float:
    """Решает задачу о среднем времени ожидания клиента перед началом обслуживания. Сложность: O(NM)."""
    queue = deque(clients)
    windows = [0] * n  # Время окончания обслуживания в каждом окне
    total_waiting_time = 0

    while queue:
        arrival_time, service_time = queue.popleft()
        # Берем окно, которое освободится раньше всего
        min_service_end_time = min(windows)
        window_index = windows.index(min_service_end_time)

        # Если клиент пришел до окончания обслуживания другого клиента в этом окне
        if arrival_time < min_service_end_time:
            total_waiting_time += min_service_end_time - arrival_time
            # Новое время окончания обслуживания в этом окне
            new_service_end_time = min_service_end_time + service_time
        else:
            # Новое время окончания обслуживания в этом окне
            new_service_end_time = arrival_time + service_time

        # Обновляем время окончания обслуживания в этом окне
        windows[window_index] = new_service_end_time

    return round(total_waiting_time / len(clients), 6)
